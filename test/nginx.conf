events {
    use epoll;
    worker_connections 65535;
}

http {
    lua_package_path '/tmp/?.lua;;';
	lua_shared_dict store 10m; # rely on store.lua
	init_by_lua "monitor = require 'monitor'";
	# log_by_lua "monitor.group(ngx.var.uri)";
	log_by_lua "monitor.group_by_path(1); monitor.group_by_host()";

	upstream backend {
		server 127.0.0.1:7070;
	}

    server {
        listen 7070 default;
        location /status {
        	content_by_lua "monitor.status()";
        }

        location /api {
			return 200 "ok";
        }

        location /error {
			return 404 "error";
        }

		location /internal {
			content_by_lua "ngx.sleep(0.3); ngx.say('internal')";
		}

		location /store {
			content_by_lua "
				local store = require 'store'
				local json = require 'cjson'
				ngx.say(json.encode(store.getAll()))
			";
		}

		location /upstream {
			proxy_set_header Host internal.com;
			proxy_pass http://backend/internal;
		}
    }
}
